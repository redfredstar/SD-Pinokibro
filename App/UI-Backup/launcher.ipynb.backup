{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# --- Environment Bootstrapping ---",
        "import subprocess",
        "import sys",
        "import os",
        "from pathlib import Path",
        "",
        "# Clone repository if not already present",
        "if not Path('PinokioCloud').exists():",
        "    print(\"Cloning PinokioCloud repository...\")",
        "    subprocess.run(",
        "        [\"git\", \"clone\", \"https://github.com/redfredstar/SD-Pinokibro.git\", \"PinokioCloud\"],",
        "        check=True,",
        "    )",
        "",
        "# Change to project directory",
        "os.chdir('PinokioCloud')",
        "if os.getcwd() not in sys.path:",
        "    sys.path.append(os.getcwd())",
        "",
        "# Install required dependencies",
        "dependencies = ['ipywidgets', 'psutil', 'requests', 'pyngrok', 'GPUtil']",
        "print(\"Installing dependencies...\")",
        "subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", \"--upgrade\", \"--quiet\"] + dependencies, check=True)",
        "print(\"‚úÖ Repository and dependencies ready\")",
        "",
        "# --- Module Imports ---",
        "import ipywidgets as widgets",
        "from IPython.display import display, HTML",
        "import queue",
        "import threading",
        "import traceback",
        "import time",
        "from app.utils.P01_CloudDetector import P01_CloudDetector",
        "# ... (and all other 13 module imports) ...",
        "from app.core.P07_InstallManager import P07_InstallManager",
        "",
        "# --- Core Engine Instantiation ---",
        "print(\"üöÄ Initializing PinokioCloud Centralized UI Orchestrator...\")",
        "terminal_output = widgets.Output()",
        "def stream_to_terminal(message):",
        "    with terminal_output:",
        "        display(HTML(f'<pre style=\"color: #333; font-family: monospace; white-space: pre-wrap; word-wrap: break-word;\">{str(message)}</pre>'))",
        "cloud_detector = P01_CloudDetector()",
        "# ... (and all other engine instantiations in the correct order) ...",
        "launch_manager = P13_LaunchManager(state_manager, translator, env_manager, process_manager, web_ui_detector, tunnel_manager)",
        "print(\"‚úÖ All engines initialized successfully\")",
        "",
        "# --- UI Widget Creation ---",
        "discover_output = widgets.Output()",
        "my_library_output = widgets.Output()",
        "active_tunnels_output = widgets.Output()",
        "tab = widgets.Tab()",
        "tab.children = [discover_output, my_library_output, active_tunnels_output, terminal_output]",
        "tab.set_title(0, 'üîç Discover'); tab.set_title(1, 'üìö My Library'); tab.set_title(2, 'üåê Active Tunnels'); tab.set_title(3, 'üíª Terminal')",
        "",
        "# --- Centralized UI Orchestrator ---",
        "job_queue = queue.Queue()",
        "def _job_worker():",
        "    \"\"\"Single worker thread that processes all user actions serially.\"\"\"",
        "    while True:",
        "        # ... (full, correct worker logic here) ...",
        "worker_thread = threading.Thread(target=_job_worker, daemon=True)",
        "worker_thread.start()",
        "",
        "# --- UI Logic and Handlers ---",
        "def on_install_click(b):",
        "    \"\"\"Simplified install handler - just queues the job.\"\"\"",
        "    job_queue.put(('install', {'app_name': b.app_name}))",
        "    refresh_ui(busy=True)",
        "# ... (and all other on_click handlers and UI functions) ...",
        "def refresh_ui(busy=False):",
        "    \"\"\"Master UI refresh function - single source of truth for entire interface.\"\"\"",
        "    # ... (full, correct redraw logic here) ...",
        "",
        "# --- Final Execution ---",
        "display(tab)",
        "refresh_ui()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.0"
    },
    "nbformat": 4,
    "nbformat_minor": 4
  },
  "nbformat": 4,
  "nbformat_minor": 4
}